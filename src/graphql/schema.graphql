"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity
is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""Defined a Subgraph ID for an object type"""
directive @subgraphId(id: String!) on OBJECT

"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type _Block_ {
  """The hash of the block"""
  hash: Bytes

  """The block number"""
  number: Int!

  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int

  """The hash of the parent block"""
  parentHash: Bytes
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!

  """The deployment ID"""
  deployment: String!

  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow

  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}

enum Aggregation_interval {
  hour
  day
}

type APRClaim {
  id: ID!
  user: User!
  stakeId: ID!
  packageId: Int!
  grossReward: BigInt!
  netReward: BigInt!
  txHash: Bytes!
  blockNumber: BigInt!
  timestamp: BigInt!
}

input APRClaim_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  stakeId: ID
  stakeId_not: ID
  stakeId_gt: ID
  stakeId_lt: ID
  stakeId_gte: ID
  stakeId_lte: ID
  stakeId_in: [ID!]
  stakeId_not_in: [ID!]
  packageId: Int
  packageId_not: Int
  packageId_gt: Int
  packageId_lt: Int
  packageId_gte: Int
  packageId_lte: Int
  packageId_in: [Int!]
  packageId_not_in: [Int!]
  grossReward: BigInt
  grossReward_not: BigInt
  grossReward_gt: BigInt
  grossReward_lt: BigInt
  grossReward_gte: BigInt
  grossReward_lte: BigInt
  grossReward_in: [BigInt!]
  grossReward_not_in: [BigInt!]
  netReward: BigInt
  netReward_not: BigInt
  netReward_gt: BigInt
  netReward_lt: BigInt
  netReward_gte: BigInt
  netReward_lte: BigInt
  netReward_in: [BigInt!]
  netReward_not_in: [BigInt!]
  txHash: Bytes
  txHash_not: Bytes
  txHash_gt: Bytes
  txHash_lt: Bytes
  txHash_gte: Bytes
  txHash_lte: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [APRClaim_filter]
  or: [APRClaim_filter]
}

enum APRClaim_orderBy {
  id
  user
  user__id
  user__totalStaked
  user__level
  user__isGoldenStar
  user__goldenStarActivatedAt
  user__starEarningsTotal
  user__goldenEarningsTotal
  stakeId
  packageId
  grossReward
  netReward
  txHash
  blockNumber
  timestamp
}

scalar BigDecimal

scalar BigInt

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

input BlockChangedFilter {
  number_gte: Int!
}

scalar Bytes

type Composition {
  id: ID!
  index: Int!
  yYearnPct: Int!
  sYearnPct: Int!
  pYearnPct: Int!
  txHash: Bytes!
  blockNumber: BigInt!
  timestamp: BigInt!
}

input Composition_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  index: Int
  index_not: Int
  index_gt: Int
  index_lt: Int
  index_gte: Int
  index_lte: Int
  index_in: [Int!]
  index_not_in: [Int!]
  yYearnPct: Int
  yYearnPct_not: Int
  yYearnPct_gt: Int
  yYearnPct_lt: Int
  yYearnPct_gte: Int
  yYearnPct_lte: Int
  yYearnPct_in: [Int!]
  yYearnPct_not_in: [Int!]
  sYearnPct: Int
  sYearnPct_not: Int
  sYearnPct_gt: Int
  sYearnPct_lt: Int
  sYearnPct_gte: Int
  sYearnPct_lte: Int
  sYearnPct_in: [Int!]
  sYearnPct_not_in: [Int!]
  pYearnPct: Int
  pYearnPct_not: Int
  pYearnPct_gt: Int
  pYearnPct_lt: Int
  pYearnPct_gte: Int
  pYearnPct_lte: Int
  pYearnPct_in: [Int!]
  pYearnPct_not_in: [Int!]
  txHash: Bytes
  txHash_not: Bytes
  txHash_gt: Bytes
  txHash_lt: Bytes
  txHash_gte: Bytes
  txHash_lte: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Composition_filter]
  or: [Composition_filter]
}

enum Composition_orderBy {
  id
  index
  yYearnPct
  sYearnPct
  pYearnPct
  txHash
  blockNumber
  timestamp
}

type GoldenStarActivation {
  id: ID!
  user: User!
  activatedAt: BigInt!
  txHash: Bytes!
  blockNumber: BigInt!
  timestamp: BigInt!
}

input GoldenStarActivation_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  activatedAt: BigInt
  activatedAt_not: BigInt
  activatedAt_gt: BigInt
  activatedAt_lt: BigInt
  activatedAt_gte: BigInt
  activatedAt_lte: BigInt
  activatedAt_in: [BigInt!]
  activatedAt_not_in: [BigInt!]
  txHash: Bytes
  txHash_not: Bytes
  txHash_gt: Bytes
  txHash_lt: Bytes
  txHash_gte: Bytes
  txHash_lte: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [GoldenStarActivation_filter]
  or: [GoldenStarActivation_filter]
}

enum GoldenStarActivation_orderBy {
  id
  user
  user__id
  user__totalStaked
  user__level
  user__isGoldenStar
  user__goldenStarActivatedAt
  user__starEarningsTotal
  user__goldenEarningsTotal
  activatedAt
  txHash
  blockNumber
  timestamp
}

type GoldenStarPayout {
  id: ID!
  user: User!
  amount: BigInt!
  kind: String!
  txHash: Bytes!
  blockNumber: BigInt!
  timestamp: BigInt!
}

input GoldenStarPayout_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  kind: String
  kind_not: String
  kind_gt: String
  kind_lt: String
  kind_gte: String
  kind_lte: String
  kind_in: [String!]
  kind_not_in: [String!]
  kind_contains: String
  kind_contains_nocase: String
  kind_not_contains: String
  kind_not_contains_nocase: String
  kind_starts_with: String
  kind_starts_with_nocase: String
  kind_not_starts_with: String
  kind_not_starts_with_nocase: String
  kind_ends_with: String
  kind_ends_with_nocase: String
  kind_not_ends_with: String
  kind_not_ends_with_nocase: String
  txHash: Bytes
  txHash_not: Bytes
  txHash_gt: Bytes
  txHash_lt: Bytes
  txHash_gte: Bytes
  txHash_lte: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [GoldenStarPayout_filter]
  or: [GoldenStarPayout_filter]
}

enum GoldenStarPayout_orderBy {
  id
  user
  user__id
  user__totalStaked
  user__level
  user__isGoldenStar
  user__goldenStarActivatedAt
  user__starEarningsTotal
  user__goldenEarningsTotal
  amount
  kind
  txHash
  blockNumber
  timestamp
}

"""
8 bytes signed integer

"""
scalar Int8

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Package {
  id: ID!
  packageId: Int!
  durationInDays: Int!
  aprBps: Int!
  monthlyUnstake: Boolean!
  isActive: Boolean!
  minStakeAmount: BigInt!
  monthlyPrincipalReturnPercent: Int!
  monthlyAPRClaimable: Boolean!
  claimableInterval: BigInt!
  stakeMultiple: BigInt!
  principalLocked: Boolean!
  createdAt: BigInt!
  txHash: Bytes!
}

input Package_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  packageId: Int
  packageId_not: Int
  packageId_gt: Int
  packageId_lt: Int
  packageId_gte: Int
  packageId_lte: Int
  packageId_in: [Int!]
  packageId_not_in: [Int!]
  durationInDays: Int
  durationInDays_not: Int
  durationInDays_gt: Int
  durationInDays_lt: Int
  durationInDays_gte: Int
  durationInDays_lte: Int
  durationInDays_in: [Int!]
  durationInDays_not_in: [Int!]
  aprBps: Int
  aprBps_not: Int
  aprBps_gt: Int
  aprBps_lt: Int
  aprBps_gte: Int
  aprBps_lte: Int
  aprBps_in: [Int!]
  aprBps_not_in: [Int!]
  monthlyUnstake: Boolean
  monthlyUnstake_not: Boolean
  monthlyUnstake_in: [Boolean!]
  monthlyUnstake_not_in: [Boolean!]
  isActive: Boolean
  isActive_not: Boolean
  isActive_in: [Boolean!]
  isActive_not_in: [Boolean!]
  minStakeAmount: BigInt
  minStakeAmount_not: BigInt
  minStakeAmount_gt: BigInt
  minStakeAmount_lt: BigInt
  minStakeAmount_gte: BigInt
  minStakeAmount_lte: BigInt
  minStakeAmount_in: [BigInt!]
  minStakeAmount_not_in: [BigInt!]
  monthlyPrincipalReturnPercent: Int
  monthlyPrincipalReturnPercent_not: Int
  monthlyPrincipalReturnPercent_gt: Int
  monthlyPrincipalReturnPercent_lt: Int
  monthlyPrincipalReturnPercent_gte: Int
  monthlyPrincipalReturnPercent_lte: Int
  monthlyPrincipalReturnPercent_in: [Int!]
  monthlyPrincipalReturnPercent_not_in: [Int!]
  monthlyAPRClaimable: Boolean
  monthlyAPRClaimable_not: Boolean
  monthlyAPRClaimable_in: [Boolean!]
  monthlyAPRClaimable_not_in: [Boolean!]
  claimableInterval: BigInt
  claimableInterval_not: BigInt
  claimableInterval_gt: BigInt
  claimableInterval_lt: BigInt
  claimableInterval_gte: BigInt
  claimableInterval_lte: BigInt
  claimableInterval_in: [BigInt!]
  claimableInterval_not_in: [BigInt!]
  stakeMultiple: BigInt
  stakeMultiple_not: BigInt
  stakeMultiple_gt: BigInt
  stakeMultiple_lt: BigInt
  stakeMultiple_gte: BigInt
  stakeMultiple_lte: BigInt
  stakeMultiple_in: [BigInt!]
  stakeMultiple_not_in: [BigInt!]
  principalLocked: Boolean
  principalLocked_not: Boolean
  principalLocked_in: [Boolean!]
  principalLocked_not_in: [Boolean!]
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  txHash: Bytes
  txHash_not: Bytes
  txHash_gt: Bytes
  txHash_lt: Bytes
  txHash_gte: Bytes
  txHash_lte: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Package_filter]
  or: [Package_filter]
}

enum Package_orderBy {
  id
  packageId
  durationInDays
  aprBps
  monthlyUnstake
  isActive
  minStakeAmount
  monthlyPrincipalReturnPercent
  monthlyAPRClaimable
  claimableInterval
  stakeMultiple
  principalLocked
  createdAt
  txHash
}

type Query {
  user(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): User
  users(
    skip: Int = 0
    first: Int = 100
    orderBy: User_orderBy
    orderDirection: OrderDirection
    where: User_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [User!]!
  stake(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Stake
  stakes(
    skip: Int = 0
    first: Int = 100
    orderBy: Stake_orderBy
    orderDirection: OrderDirection
    where: Stake_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Stake!]!
  aprclaim(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): APRClaim
  aprclaims(
    skip: Int = 0
    first: Int = 100
    orderBy: APRClaim_orderBy
    orderDirection: OrderDirection
    where: APRClaim_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [APRClaim!]!
  unstake(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Unstake
  unstakes(
    skip: Int = 0
    first: Int = 100
    orderBy: Unstake_orderBy
    orderDirection: OrderDirection
    where: Unstake_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Unstake!]!
  referral(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Referral
  referrals(
    skip: Int = 0
    first: Int = 100
    orderBy: Referral_orderBy
    orderDirection: OrderDirection
    where: Referral_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Referral!]!
  referralEarning(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ReferralEarning
  referralEarnings(
    skip: Int = 0
    first: Int = 100
    orderBy: ReferralEarning_orderBy
    orderDirection: OrderDirection
    where: ReferralEarning_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ReferralEarning!]!
  starLevelChange(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): StarLevelChange
  starLevelChanges(
    skip: Int = 0
    first: Int = 100
    orderBy: StarLevelChange_orderBy
    orderDirection: OrderDirection
    where: StarLevelChange_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [StarLevelChange!]!
  starRewardPayout(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): StarRewardPayout
  starRewardPayouts(
    skip: Int = 0
    first: Int = 100
    orderBy: StarRewardPayout_orderBy
    orderDirection: OrderDirection
    where: StarRewardPayout_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [StarRewardPayout!]!
  goldenStarActivation(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GoldenStarActivation
  goldenStarActivations(
    skip: Int = 0
    first: Int = 100
    orderBy: GoldenStarActivation_orderBy
    orderDirection: OrderDirection
    where: GoldenStarActivation_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GoldenStarActivation!]!
  goldenStarPayout(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GoldenStarPayout
  goldenStarPayouts(
    skip: Int = 0
    first: Int = 100
    orderBy: GoldenStarPayout_orderBy
    orderDirection: OrderDirection
    where: GoldenStarPayout_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GoldenStarPayout!]!
  package(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Package
  packages(
    skip: Int = 0
    first: Int = 100
    orderBy: Package_orderBy
    orderDirection: OrderDirection
    where: Package_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Package!]!
  composition(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Composition
  compositions(
    skip: Int = 0
    first: Int = 100
    orderBy: Composition_orderBy
    orderDirection: OrderDirection
    where: Composition_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Composition!]!

  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Referral {
  id: ID!
  referrer: User!
  referee: User!
  assignedAt: BigInt!
  txHash: Bytes!
}

input Referral_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  referrer: String
  referrer_not: String
  referrer_gt: String
  referrer_lt: String
  referrer_gte: String
  referrer_lte: String
  referrer_in: [String!]
  referrer_not_in: [String!]
  referrer_contains: String
  referrer_contains_nocase: String
  referrer_not_contains: String
  referrer_not_contains_nocase: String
  referrer_starts_with: String
  referrer_starts_with_nocase: String
  referrer_not_starts_with: String
  referrer_not_starts_with_nocase: String
  referrer_ends_with: String
  referrer_ends_with_nocase: String
  referrer_not_ends_with: String
  referrer_not_ends_with_nocase: String
  referrer_: User_filter
  referee: String
  referee_not: String
  referee_gt: String
  referee_lt: String
  referee_gte: String
  referee_lte: String
  referee_in: [String!]
  referee_not_in: [String!]
  referee_contains: String
  referee_contains_nocase: String
  referee_not_contains: String
  referee_not_contains_nocase: String
  referee_starts_with: String
  referee_starts_with_nocase: String
  referee_not_starts_with: String
  referee_not_starts_with_nocase: String
  referee_ends_with: String
  referee_ends_with_nocase: String
  referee_not_ends_with: String
  referee_not_ends_with_nocase: String
  referee_: User_filter
  assignedAt: BigInt
  assignedAt_not: BigInt
  assignedAt_gt: BigInt
  assignedAt_lt: BigInt
  assignedAt_gte: BigInt
  assignedAt_lte: BigInt
  assignedAt_in: [BigInt!]
  assignedAt_not_in: [BigInt!]
  txHash: Bytes
  txHash_not: Bytes
  txHash_gt: Bytes
  txHash_lt: Bytes
  txHash_gte: Bytes
  txHash_lte: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Referral_filter]
  or: [Referral_filter]
}

enum Referral_orderBy {
  id
  referrer
  referrer__id
  referrer__totalStaked
  referrer__level
  referrer__isGoldenStar
  referrer__goldenStarActivatedAt
  referrer__starEarningsTotal
  referrer__goldenEarningsTotal
  referee
  referee__id
  referee__totalStaked
  referee__level
  referee__isGoldenStar
  referee__goldenStarActivatedAt
  referee__starEarningsTotal
  referee__goldenEarningsTotal
  assignedAt
  txHash
}

type ReferralEarning {
  id: ID!
  user: User!
  level: Int!
  token: Bytes!
  amount: BigInt!
  txHash: Bytes!
  blockNumber: BigInt!
  timestamp: BigInt!
}

input ReferralEarning_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  level: Int
  level_not: Int
  level_gt: Int
  level_lt: Int
  level_gte: Int
  level_lte: Int
  level_in: [Int!]
  level_not_in: [Int!]
  token: Bytes
  token_not: Bytes
  token_gt: Bytes
  token_lt: Bytes
  token_gte: Bytes
  token_lte: Bytes
  token_in: [Bytes!]
  token_not_in: [Bytes!]
  token_contains: Bytes
  token_not_contains: Bytes
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  txHash: Bytes
  txHash_not: Bytes
  txHash_gt: Bytes
  txHash_lt: Bytes
  txHash_gte: Bytes
  txHash_lte: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ReferralEarning_filter]
  or: [ReferralEarning_filter]
}

enum ReferralEarning_orderBy {
  id
  user
  user__id
  user__totalStaked
  user__level
  user__isGoldenStar
  user__goldenStarActivatedAt
  user__starEarningsTotal
  user__goldenEarningsTotal
  level
  token
  amount
  txHash
  blockNumber
  timestamp
}

type Stake {
  id: ID!
  user: User!
  packageId: Int!
  totalStaked: BigInt!
  claimedAPR: BigInt!
  withdrawnPrincipal: BigInt!
  startTime: BigInt!
  lastClaimedAt: BigInt!
  lastUnstakedAt: BigInt!
  isFullyUnstaked: Boolean!
  txHash: Bytes!
  blockNumber: BigInt!
  timestamp: BigInt!
}

input Stake_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  packageId: Int
  packageId_not: Int
  packageId_gt: Int
  packageId_lt: Int
  packageId_gte: Int
  packageId_lte: Int
  packageId_in: [Int!]
  packageId_not_in: [Int!]
  totalStaked: BigInt
  totalStaked_not: BigInt
  totalStaked_gt: BigInt
  totalStaked_lt: BigInt
  totalStaked_gte: BigInt
  totalStaked_lte: BigInt
  totalStaked_in: [BigInt!]
  totalStaked_not_in: [BigInt!]
  claimedAPR: BigInt
  claimedAPR_not: BigInt
  claimedAPR_gt: BigInt
  claimedAPR_lt: BigInt
  claimedAPR_gte: BigInt
  claimedAPR_lte: BigInt
  claimedAPR_in: [BigInt!]
  claimedAPR_not_in: [BigInt!]
  withdrawnPrincipal: BigInt
  withdrawnPrincipal_not: BigInt
  withdrawnPrincipal_gt: BigInt
  withdrawnPrincipal_lt: BigInt
  withdrawnPrincipal_gte: BigInt
  withdrawnPrincipal_lte: BigInt
  withdrawnPrincipal_in: [BigInt!]
  withdrawnPrincipal_not_in: [BigInt!]
  startTime: BigInt
  startTime_not: BigInt
  startTime_gt: BigInt
  startTime_lt: BigInt
  startTime_gte: BigInt
  startTime_lte: BigInt
  startTime_in: [BigInt!]
  startTime_not_in: [BigInt!]
  lastClaimedAt: BigInt
  lastClaimedAt_not: BigInt
  lastClaimedAt_gt: BigInt
  lastClaimedAt_lt: BigInt
  lastClaimedAt_gte: BigInt
  lastClaimedAt_lte: BigInt
  lastClaimedAt_in: [BigInt!]
  lastClaimedAt_not_in: [BigInt!]
  lastUnstakedAt: BigInt
  lastUnstakedAt_not: BigInt
  lastUnstakedAt_gt: BigInt
  lastUnstakedAt_lt: BigInt
  lastUnstakedAt_gte: BigInt
  lastUnstakedAt_lte: BigInt
  lastUnstakedAt_in: [BigInt!]
  lastUnstakedAt_not_in: [BigInt!]
  isFullyUnstaked: Boolean
  isFullyUnstaked_not: Boolean
  isFullyUnstaked_in: [Boolean!]
  isFullyUnstaked_not_in: [Boolean!]
  txHash: Bytes
  txHash_not: Bytes
  txHash_gt: Bytes
  txHash_lt: Bytes
  txHash_gte: Bytes
  txHash_lte: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Stake_filter]
  or: [Stake_filter]
}

enum Stake_orderBy {
  id
  user
  user__id
  user__totalStaked
  user__level
  user__isGoldenStar
  user__goldenStarActivatedAt
  user__starEarningsTotal
  user__goldenEarningsTotal
  packageId
  totalStaked
  claimedAPR
  withdrawnPrincipal
  startTime
  lastClaimedAt
  lastUnstakedAt
  isFullyUnstaked
  txHash
  blockNumber
  timestamp
}

type StarLevelChange {
  id: ID!
  user: User!
  newLevel: Int!
  txHash: Bytes!
  blockNumber: BigInt!
  timestamp: BigInt!
}

input StarLevelChange_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  newLevel: Int
  newLevel_not: Int
  newLevel_gt: Int
  newLevel_lt: Int
  newLevel_gte: Int
  newLevel_lte: Int
  newLevel_in: [Int!]
  newLevel_not_in: [Int!]
  txHash: Bytes
  txHash_not: Bytes
  txHash_gt: Bytes
  txHash_lt: Bytes
  txHash_gte: Bytes
  txHash_lte: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [StarLevelChange_filter]
  or: [StarLevelChange_filter]
}

enum StarLevelChange_orderBy {
  id
  user
  user__id
  user__totalStaked
  user__level
  user__isGoldenStar
  user__goldenStarActivatedAt
  user__starEarningsTotal
  user__goldenEarningsTotal
  newLevel
  txHash
  blockNumber
  timestamp
}

type StarRewardPayout {
  id: ID!
  user: User!
  level: Int!
  amount: BigInt!
  kind: String!
  txHash: Bytes!
  blockNumber: BigInt!
  timestamp: BigInt!
}

input StarRewardPayout_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  level: Int
  level_not: Int
  level_gt: Int
  level_lt: Int
  level_gte: Int
  level_lte: Int
  level_in: [Int!]
  level_not_in: [Int!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  kind: String
  kind_not: String
  kind_gt: String
  kind_lt: String
  kind_gte: String
  kind_lte: String
  kind_in: [String!]
  kind_not_in: [String!]
  kind_contains: String
  kind_contains_nocase: String
  kind_not_contains: String
  kind_not_contains_nocase: String
  kind_starts_with: String
  kind_starts_with_nocase: String
  kind_not_starts_with: String
  kind_not_starts_with_nocase: String
  kind_ends_with: String
  kind_ends_with_nocase: String
  kind_not_ends_with: String
  kind_not_ends_with_nocase: String
  txHash: Bytes
  txHash_not: Bytes
  txHash_gt: Bytes
  txHash_lt: Bytes
  txHash_gte: Bytes
  txHash_lte: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [StarRewardPayout_filter]
  or: [StarRewardPayout_filter]
}

enum StarRewardPayout_orderBy {
  id
  user
  user__id
  user__totalStaked
  user__level
  user__isGoldenStar
  user__goldenStarActivatedAt
  user__starEarningsTotal
  user__goldenEarningsTotal
  level
  amount
  kind
  txHash
  blockNumber
  timestamp
}

"""
A string representation of microseconds UNIX timestamp (16 digits)

"""
scalar Timestamp

type Unstake {
  id: ID!
  user: User!
  stakeId: ID!
  amount: BigInt!
  txHash: Bytes!
  blockNumber: BigInt!
  timestamp: BigInt!
}

input Unstake_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  user: String
  user_not: String
  user_gt: String
  user_lt: String
  user_gte: String
  user_lte: String
  user_in: [String!]
  user_not_in: [String!]
  user_contains: String
  user_contains_nocase: String
  user_not_contains: String
  user_not_contains_nocase: String
  user_starts_with: String
  user_starts_with_nocase: String
  user_not_starts_with: String
  user_not_starts_with_nocase: String
  user_ends_with: String
  user_ends_with_nocase: String
  user_not_ends_with: String
  user_not_ends_with_nocase: String
  user_: User_filter
  stakeId: ID
  stakeId_not: ID
  stakeId_gt: ID
  stakeId_lt: ID
  stakeId_gte: ID
  stakeId_lte: ID
  stakeId_in: [ID!]
  stakeId_not_in: [ID!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  txHash: Bytes
  txHash_not: Bytes
  txHash_gt: Bytes
  txHash_lt: Bytes
  txHash_gte: Bytes
  txHash_lte: Bytes
  txHash_in: [Bytes!]
  txHash_not_in: [Bytes!]
  txHash_contains: Bytes
  txHash_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Unstake_filter]
  or: [Unstake_filter]
}

enum Unstake_orderBy {
  id
  user
  user__id
  user__totalStaked
  user__level
  user__isGoldenStar
  user__goldenStarActivatedAt
  user__starEarningsTotal
  user__goldenEarningsTotal
  stakeId
  amount
  txHash
  blockNumber
  timestamp
}

type User {
  id: ID!
  totalStaked: BigInt!
  referrer: User
  level: Int!
  isGoldenStar: Boolean!
  goldenStarActivatedAt: BigInt
  starEarningsTotal: BigInt!
  goldenEarningsTotal: BigInt!
}

input User_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  totalStaked: BigInt
  totalStaked_not: BigInt
  totalStaked_gt: BigInt
  totalStaked_lt: BigInt
  totalStaked_gte: BigInt
  totalStaked_lte: BigInt
  totalStaked_in: [BigInt!]
  totalStaked_not_in: [BigInt!]
  referrer: String
  referrer_not: String
  referrer_gt: String
  referrer_lt: String
  referrer_gte: String
  referrer_lte: String
  referrer_in: [String!]
  referrer_not_in: [String!]
  referrer_contains: String
  referrer_contains_nocase: String
  referrer_not_contains: String
  referrer_not_contains_nocase: String
  referrer_starts_with: String
  referrer_starts_with_nocase: String
  referrer_not_starts_with: String
  referrer_not_starts_with_nocase: String
  referrer_ends_with: String
  referrer_ends_with_nocase: String
  referrer_not_ends_with: String
  referrer_not_ends_with_nocase: String
  referrer_: User_filter
  level: Int
  level_not: Int
  level_gt: Int
  level_lt: Int
  level_gte: Int
  level_lte: Int
  level_in: [Int!]
  level_not_in: [Int!]
  isGoldenStar: Boolean
  isGoldenStar_not: Boolean
  isGoldenStar_in: [Boolean!]
  isGoldenStar_not_in: [Boolean!]
  goldenStarActivatedAt: BigInt
  goldenStarActivatedAt_not: BigInt
  goldenStarActivatedAt_gt: BigInt
  goldenStarActivatedAt_lt: BigInt
  goldenStarActivatedAt_gte: BigInt
  goldenStarActivatedAt_lte: BigInt
  goldenStarActivatedAt_in: [BigInt!]
  goldenStarActivatedAt_not_in: [BigInt!]
  starEarningsTotal: BigInt
  starEarningsTotal_not: BigInt
  starEarningsTotal_gt: BigInt
  starEarningsTotal_lt: BigInt
  starEarningsTotal_gte: BigInt
  starEarningsTotal_lte: BigInt
  starEarningsTotal_in: [BigInt!]
  starEarningsTotal_not_in: [BigInt!]
  goldenEarningsTotal: BigInt
  goldenEarningsTotal_not: BigInt
  goldenEarningsTotal_gt: BigInt
  goldenEarningsTotal_lt: BigInt
  goldenEarningsTotal_gte: BigInt
  goldenEarningsTotal_lte: BigInt
  goldenEarningsTotal_in: [BigInt!]
  goldenEarningsTotal_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [User_filter]
  or: [User_filter]
}

enum User_orderBy {
  id
  totalStaked
  referrer
  referrer__id
  referrer__totalStaked
  referrer__level
  referrer__isGoldenStar
  referrer__goldenStarActivatedAt
  referrer__starEarningsTotal
  referrer__goldenEarningsTotal
  level
  isGoldenStar
  goldenStarActivatedAt
  starEarningsTotal
  goldenEarningsTotal
}

