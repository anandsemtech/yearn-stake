// src/components/ClaimsHubPanel.tsx
import React, { useEffect, useMemo, useRef, useState, useCallback } from "react";
import type { Address } from "viem";
import { formatUnits } from "viem";
import { useAccount } from "wagmi";
import { gql } from "graphql-request";
import { subgraph } from "@/lib/subgraph";

import { Copy, Check, RefreshCcw, Sparkles, Star, Crown, User } from "lucide-react";

/* =========================================================
   Small UI atoms
   ========================================================= */
const Progress: React.FC = () => (
  <div className="w-full h-1.5 bg-white/5 rounded overflow-hidden">
    <div className="h-full w-1/3 bg-emerald-500/70 animate-[progressSlide_1.2s_ease-in-out_infinite]" />
    <style>{`@keyframes progressSlide{0%{transform:translateX(-100%)}50%{transform:translateX(40%)}100%{transform:translateX(160%)}}`}</style>
  </div>
);

const StatPill: React.FC<{ label: string; value: string }> = ({ label, value }) => (
  <div className="inline-flex items-center gap-2 rounded-full border border-white/10 bg-white/5 px-3 py-1">
    <span className="text-[11px] text-gray-400">{label}</span>
    <span className="text-xs font-semibold text-white">{value}</span>
  </div>
);

const AddressPill: React.FC<{ address?: string }> = ({ address }) => {
  const [copied, setCopied] = useState(false);
  if (!address) return null;
  const short = `${address.slice(0,6)}…${address.slice(-4)}`;
  return (
    <button
      onClick={async () => { try { await navigator.clipboard.writeText(address); setCopied(true); setTimeout(()=>setCopied(false),900);} catch {} }}
      className="inline-flex items-center gap-2 rounded-full border border-white/10 bg-white/5 px-3 py-1 text-xs font-mono text-gray-200 hover:bg-white/10"
      title="Copy address"
    >
      {short} {copied ? <Check className="w-3.5 h-3.5 text-emerald-400"/> : <Copy className="w-3.5 h-3.5 text-gray-400" />}
    </button>
  );
};

const SkeletonRow: React.FC<{ cols?: number }> = ({ cols = 4 }) => (
  <div className="px-3 py-2 grid grid-cols-1 md:grid-cols-12 gap-1">
    {Array.from({ length: cols }).map((_, i) => (
      <div key={i} className="h-3 rounded bg-white/10 md:col-span-3" />
    ))}
  </div>
);

/* =========================================================
   Types
   ========================================================= */
type TabKey = "referral" | "star" | "golden";

type ReferralEarningRow = {
  txHash: `0x${string}`;
  blockNumber: bigint;
  user: Address;            // referrer = me
  referee: Address;         // who’s stake generated it
  level: number;
  token: `0x${string}`;     // Bytes in subgraph
  amount: bigint;
  ts?: number;
};

type StarLog = {
  txHash: `0x${string}`;
  blockNumber: bigint;
  user: Address;
  level: number;
  amount: bigint;
  ts?: number;
};

type GSLog = {
  txHash: `0x${string}`;
  blockNumber: bigint;
  user: Address;
  amount: bigint;
  ts?: number;
};

type ClaimsHubPanelProps = {
  proxy?: Address;
  deployBlock?: bigint;
  defaultTab?: TabKey;
  yyDecimals?: number; // default 18
};

/* =========================================================
   Tiny cache (memory + localStorage)
   ========================================================= */
type CacheValue<T> = { t: number; data: T };
const MEM = new Map<string, CacheValue<any>>();
const TTL_MS_DEFAULT = 60_000;

function readCache<T>(key: string, ttlMs = TTL_MS_DEFAULT): T | null {
  const now = Date.now();
  const m = MEM.get(key);
  if (m && now - m.t < ttlMs) return m.data as T;
  try {
    const raw = localStorage.getItem(key);
    if (!raw) return null;
    const v = JSON.parse(raw) as CacheValue<T>;
    if (now - v.t < ttlMs) {
      MEM.set(key, v);
      return v.data;
    }
  } catch {}
  return null;
}
function writeCache<T>(key: string, data: T) {
  const entry: CacheValue<T> = { t: Date.now(), data };
  MEM.set(key, entry);
  try { localStorage.setItem(key, JSON.stringify(entry)); } catch {}
}

/* =========================================================
   GraphQL queries (mine only)
   ========================================================= */

/** Referral earnings generated by other users' stakes for me (referrer) */
const Q_REFERRAL_EARNINGS_MINE = gql/* GraphQL */ `
  query ReferralEarningsMine($user: ID!, $first: Int!, $skip: Int!) {
    referralEarnings(
      where: { user: $user }
      orderBy: blockNumber
      orderDirection: desc
      first: $first
      skip: $skip
    ) {
      id
      user { id }         # me (referrer/earner)
      referee { id }      # who triggered this earning
      level
      token               # Bytes
      amount
      blockNumber
      timestamp
      txHash
    }
  }
`;

const Q_STAR_CLAIMS_MINE = gql/* GraphQL */ `
  query StarClaimsMine($user: ID!, $first: Int!, $skip: Int!) {
    starRewardPayouts(
      where: { user: $user, kind: "claimed" }
      orderBy: blockNumber
      orderDirection: desc
      first: $first
      skip: $skip
    ) {
      id
      user { id }
      level
      amount
      kind
      blockNumber
      timestamp
      txHash
    }
  }
`;

const Q_GOLDEN_CLAIMS_MINE = gql/* GraphQL */ `
  query GoldenClaimsMine($user: ID!, $first: Int!, $skip: Int!) {
    goldenStarPayouts(
      where: { user: $user, kind: "claimed" }
      orderBy: blockNumber
      orderDirection: desc
      first: $first
      skip: $skip
    ) {
      id
      user { id }
      amount
      kind
      blockNumber
      timestamp
      txHash
    }
  }
`;

/* =========================================================
   Data hooks — subgraph only (mine)
   ========================================================= */
function useReferralEarningsMine({ user, ttlMs = TTL_MS_DEFAULT, pageSize = 100 }:{
  user?: Address | null, ttlMs?: number, pageSize?: number
}) {
  const [loading, setLoading] = useState(false);
  const [rows, setRows] = useState<ReferralEarningRow[]>([]);
  const [error, setError] = useState<string | null>(null);
  const inFlight = useRef(false);

  const refetch = useCallback(async () => {
    if (inFlight.current) return;
    inFlight.current = true;

    const key = `sg:ref-earn:mine:${(user ?? "").toLowerCase()}:v1`;
    const cached = readCache<ReferralEarningRow[]>(key, ttlMs);
    setRows(cached ?? []);
    setLoading(true); setError(null);

    try {
      const first = pageSize, skip = 0;
      const resp = await subgraph.request<any>(Q_REFERRAL_EARNINGS_MINE, {
        user: (user ?? "0x0000000000000000000000000000000000000000").toLowerCase(),
        first, skip
      });

      const list = (resp?.referralEarnings ?? []) as Array<any>;
      const mapped: ReferralEarningRow[] = list.map((r:any) => ({
        txHash: (r.txHash as string) as `0x${string}`,
        blockNumber: BigInt(r.blockNumber ?? "0"),
        user: (r.user?.id as string) as Address,
        referee: (r.referee?.id as string) as Address,
        level: Number(r.level ?? 0),
        token: (r.token as string).toLowerCase() as `0x${string}`,
        amount: BigInt(r.amount ?? "0"),
        ts: r.timestamp ? Number(r.timestamp) : undefined,
      }));

      writeCache(key, mapped);
      setRows(mapped);
    } catch (e: any) {
      setError(e?.message ?? "Failed to load referral earnings");
      setRows(cached ?? []);
    } finally {
      setLoading(false);
      inFlight.current = false;
    }
  }, [user, ttlMs, pageSize]);

  useEffect(() => { refetch(); }, [refetch]);

  const totals = useMemo(() => {
    // group totals per token
    const byToken = new Map<string,bigint>();
    let grand = 0n;
    for (const r of rows) {
      byToken.set(r.token, (byToken.get(r.token) ?? 0n) + r.amount);
      grand += r.amount;
    }
    return { byToken, grand };
  }, [rows]);

  return { loading, rows, totals, error, refetch };
}

function useStarClaimsMine({ user, ttlMs = TTL_MS_DEFAULT, pageSize = 100 }:{
  user?: Address | null, ttlMs?: number, pageSize?: number
}) {
  const [loading, setLoading] = useState(false);
  const [logs, setLogs] = useState<StarLog[]>([]);
  const [error, setError] = useState<string | null>(null);
  const inFlight = useRef(false);

  const refetch = useCallback(async () => {
    if (inFlight.current) return;
    inFlight.current = true;

    const key = `sg:star:mine:${(user ?? "").toLowerCase()}:v1`;
    const cached = readCache<StarLog[]>(key, ttlMs);
    setLogs(cached ?? []);
    setLoading(true); setError(null);

    try {
      const first = pageSize, skip = 0;
      const resp = await subgraph.request<any>(Q_STAR_CLAIMS_MINE, {
        user: (user ?? "0x0000000000000000000000000000000000000000").toLowerCase(),
        first, skip
      });
      const rows = (resp?.starRewardPayouts ?? []) as Array<any>;
      const mapped: StarLog[] = rows.map((r: any) => ({
        txHash: (r.txHash as string) as `0x${string}`,
        blockNumber: BigInt(r.blockNumber ?? "0"),
        user: (r.user?.id as string) as Address,
        level: Number(r.level ?? 0),
        amount: BigInt(r.amount ?? "0"),
        ts: r.timestamp ? Number(r.timestamp) : undefined,
      }));
      writeCache(key, mapped);
      setLogs(mapped);
    } catch (e: any) {
      setError(e?.message ?? "Failed to load star claims");
      setLogs(cached ?? []);
    } finally {
      setLoading(false);
      inFlight.current = false;
    }
  }, [user, ttlMs, pageSize]);

  useEffect(() => { refetch(); }, [refetch]);

  const totals = useMemo(()=>{
    const perLevel = new Map<number,bigint>(); let grand=0n;
    for(const l of logs){ perLevel.set(l.level, (perLevel.get(l.level)??0n)+l.amount); grand+=l.amount; }
    return { perLevel, grand };
  },[logs]);

  return { loading, logs, totals, error, refetch };
}

function useGoldenStarClaimsMine({ user, ttlMs = TTL_MS_DEFAULT, pageSize = 100 }:{
  user?: Address | null, ttlMs?: number, pageSize?: number
}) {
  const [loading, setLoading] = useState(false);
  const [logs, setLogs] = useState<GSLog[]>([]);
  const [error, setError] = useState<string | null>(null);
  const inFlight = useRef(false);

  const refetch = useCallback(async () => {
    if (inFlight.current) return;
    inFlight.current = true;

    const key = `sg:golden:mine:${(user ?? "").toLowerCase()}:v1`;
    const cached = readCache<GSLog[]>(key, ttlMs);
    setLogs(cached ?? []);
    setLoading(true); setError(null);

    try {
      const first = pageSize, skip = 0;
      const resp = await subgraph.request<any>(Q_GOLDEN_CLAIMS_MINE, {
        user: (user ?? "0x0000000000000000000000000000000000000000").toLowerCase(),
        first, skip
      });
      const rows = (resp?.goldenStarPayouts ?? []) as Array<any>;
      const mapped: GSLog[] = rows.map((r: any) => ({
        txHash: (r.txHash as string) as `0x${string}`,
        blockNumber: BigInt(r.blockNumber ?? "0"),
        user: (r.user?.id as string) as Address,
        amount: BigInt(r.amount ?? "0"),
        ts: r.timestamp ? Number(r.timestamp) : undefined,
      }));
      writeCache(key, mapped);
      setLogs(mapped);
    } catch (e: any) {
      setError(e?.message ?? "Failed to load golden star claims");
      setLogs(cached ?? []);
    } finally {
      setLoading(false);
      inFlight.current = false;
    }
  }, [user, ttlMs, pageSize]);

  useEffect(() => { refetch(); }, [refetch]);

  const total = useMemo(()=> logs.reduce((acc,l)=> acc + l.amount, 0n), [logs]);

  return { loading, logs, total, error, refetch };
}

/* =========================================================
   Panels — mine only
   ========================================================= */

// Drop-in replacement for ReferralTab (summary only, no block/time)
const ReferralTab: React.FC<{ yyDecimals?: number; refreshSignal: number; onRefetched?: () => void; }> = ({ refreshSignal, onRefetched }) => {
  const { address } = useAccount();
  const { loading, rows, totals, error, refetch } = useReferralEarningsMine({ user: address });

  useEffect(() => {
    if (refreshSignal > 0) { (async () => { await refetch(); onRefetched?.(); })(); }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [refreshSignal]);

  // token addresses from env (lowercased)
  const yyAddr = (import.meta.env.VITE_YYEARN_ADDRESS as string)?.toLowerCase() || "0x0000000000000000000000000000000000000000";
  const syAddr = (import.meta.env.VITE_SYEARN_ADDRESS as string)?.toLowerCase() || "0x0000000000000000000000000000000000000000";
  const pyAddr = (import.meta.env.VITE_PYEARN_ADDRESS as string)?.toLowerCase() || "0x0000000000000000000000000000000000000000";

  // Aggregate per referee (summary)
  type Agg = { referee: Address; yy: bigint; sy: bigint; py: bigint };
  const perReferee = useMemo(() => {
    const m = new Map<string, Agg>();
    for (const r of rows) {
      const key = r.referee.toLowerCase();
      const cur = m.get(key) ?? { referee: r.referee, yy: 0n, sy: 0n, py: 0n };
      const token = r.token.toLowerCase();
      if (token === yyAddr) cur.yy += r.amount;
      else if (token === syAddr) cur.sy += r.amount;
      else if (token === pyAddr) cur.py += r.amount;
      m.set(key, cur);
    }
    // sort by total YY+SY+PY desc (optional)
    return Array.from(m.values()).sort((a,b)=>{
      const as = a.yy + a.sy + a.py;
      const bs = b.yy + b.sy + b.py;
      return bs > as ? 1 : bs < as ? -1 : 0;
    });
  }, [rows, yyAddr, syAddr, pyAddr]);

  // Totals strip (assume 18 decimals for all)
  const sumYY = Number(formatUnits(totals.byToken.get(yyAddr) ?? 0n, 18));
  const sumSY = Number(formatUnits(totals.byToken.get(syAddr) ?? 0n, 18));
  const sumPY = Number(formatUnits(totals.byToken.get(pyAddr) ?? 0n, 18));

  return (
    <>
      {/* Header */}
      <div className="hidden md:grid grid-cols-12 px-3 py-2 text-[11px] text-gray-400 bg-white/5 rounded-t-xl">
        <div className="col-span-6">From (referee)</div>
        <div className="col-span-2 text-right">YY</div>
        <div className="col-span-2 text-right">SY</div>
        <div className="col-span-2 text-right">PY</div>
      </div>

      <div className="max-h-[60vh] overflow-auto divide-y divide-white/5 rounded-b-xl">
        {loading && (<><div className="p-4"><Progress/></div>{Array.from({length:6}).map((_,i)=><SkeletonRow key={i} cols={4}/>)}</>)}
        {!loading && error && <div className="p-4 text-rose-300 text-sm">{error}</div>}
        {!loading && !error && perReferee.length===0 && (
          <div className="p-6">
            <div className="rounded-xl border border-white/10 bg-white/5 p-4 text-center text-sm text-gray-200">
              No referral earnings yet.
              <div className="mt-2 text-[11px] opacity-70">Click Refresh to load.</div>
            </div>
          </div>
        )}

        {!loading && !error && perReferee.map((agg, idx) => {
          const yy = Number(formatUnits(agg.yy, 18));
          const sy = Number(formatUnits(agg.sy, 18));
          const py = Number(formatUnits(agg.py, 18));

          return (
            <React.Fragment key={`${agg.referee}-${idx}`}>
              {/* Desktop row */}
              <div className="px-3 py-2 hidden md:grid grid-cols-12 gap-1 text-xs text-gray-200">
                <div className="col-span-6 font-mono break-all">{agg.referee}</div>
                <div className="col-span-2 text-right">{yy.toLocaleString()}</div>
                <div className="col-span-2 text-right">{sy.toLocaleString()}</div>
                <div className="col-span-2 text-right">{py.toLocaleString()}</div>
              </div>

              {/* Mobile card */}
              <div className="md:hidden p-3">
                <div className="rounded-xl border border-white/10 bg-white/5 p-3 space-y-2">
                  <div className="text-[11px] text-gray-400">From</div>
                  <div className="font-mono text-[11px] text-gray-300 break-all">{agg.referee}</div>
                  <div className="grid grid-cols-3 gap-2 text-center">
                    <div className="rounded-lg bg-[#0f1424] px-2 py-1 text-xs text-indigo-200">YY {yy.toLocaleString()}</div>
                    <div className="rounded-lg bg-[#0f1424] px-2 py-1 text-xs text-indigo-200">SY {sy.toLocaleString()}</div>
                    <div className="rounded-lg bg-[#0f1424] px-2 py-1 text-xs text-indigo-200">PY {py.toLocaleString()}</div>
                  </div>
                </div>
              </div>
            </React.Fragment>
          );
        })}
      </div>

      {/* Totals strip */}
      <div className="px-3 sm:px-4 py-3 flex flex-wrap items-center gap-2">
        <StatPill label="YY total" value={sumYY.toLocaleString()} />
        <StatPill label="SY total" value={sumSY.toLocaleString()} />
        <StatPill label="PY total" value={sumPY.toLocaleString()} />
      </div>
    </>
  );
};




const StarTab: React.FC<{ yyDecimals?: number; refreshSignal: number; onRefetched?: () => void; }> = ({ yyDecimals = 18, refreshSignal, onRefetched }) => {
  const { address } = useAccount();
  const { loading, logs, totals, error, refetch } = useStarClaimsMine({ user: address });

  useEffect(() => {
    if (refreshSignal > 0) { (async () => { await refetch(); onRefetched?.(); })(); }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [refreshSignal]);

  const grandYY = Number(formatUnits(totals.grand, yyDecimals));
  const L = (n:number) => Number(formatUnits(totals.perLevel.get(n) ?? 0n, yyDecimals));

  return (
    <>
      <div className="hidden md:grid grid-cols-12 px-3 py-2 text-[11px] text-gray-400 bg-white/5 rounded-t-xl">
        <div className="md:col-span-4">User</div>
        <div className="md:col-span-2 text-right">Level</div>
        <div className="md:col-span-3 text-right">YY</div>
        <div className="md:col-span-3 text-right">Block / Time</div>
      </div>

      <div className="max-h-[60vh] overflow-auto divide-y divide-white/5 rounded-b-xl">
        {loading && (<><div className="p-4"><Progress/></div>{Array.from({length:6}).map((_,i)=><SkeletonRow key={i} cols={4}/>)}</>)}
        {!loading && error && <div className="p-4 text-rose-300 text-sm">{error}</div>}
        {!loading && !error && logs.length===0 && (
          <div className="p-6"><div className="rounded-xl border border-white/10 bg-white/5 p-4 text-center text-sm text-gray-200">
            No star level claims yet.
            <div className="mt-2 text-[11px] opacity-70">Click Refresh to load.</div>
          </div></div>
        )}

        {!loading && !error && logs.map((l,idx)=>{
          const yy = Number(formatUnits(l.amount, yyDecimals));
          const when = l.ts ? new Date(l.ts*1000) : undefined;
          return (
            <React.Fragment key={`${l.txHash}-${idx}`}>
              <div className="px-3 py-2 hidden md:grid grid-cols-12 gap-1 text-xs text-gray-200">
                <div className="md:col-span-4 font-mono break-all">{l.user}</div>
                <div className="md:col-span-2 text-right">L{l.level}</div>
                <div className="md:col-span-3 text-right">YY {yy.toLocaleString()}</div>
                <div className="md:col-span-3 text-right text-gray-400">#{l.blockNumber.toString()} {when?"• "+when.toLocaleString():""}</div>
              </div>

              <div className="md:hidden p-3">
                <div className="rounded-xl border border-white/10 bg-white/5 p-3 space-y-2">
                  <div className="font-mono text-[11px] text-gray-300 break-all">{l.user}</div>
                  <div className="grid grid-cols-2 gap-2 text-center">
                    <div className="rounded-lg bg-[#0f1424] px-2 py-1 text-xs text-indigo-200">Level L{l.level}</div>
                    <div className="rounded-lg bg-[#0f1424] px-2 py-1 text-xs text-indigo-200">YY {yy.toLocaleString()}</div>
                  </div>
                  <div className="text-[11px] text-gray-400 text-right">#{l.blockNumber.toString()} {when?"• "+when.toLocaleString():""}</div>
                </div>
              </div>
            </React.Fragment>
          );
        })}
      </div>

      <div className="px-3 sm:px-4 py-3 flex flex-wrap items-center gap-2">
        <StatPill label="Total YY" value={grandYY.toLocaleString()} />
        <StatPill label="L1" value={L(1).toLocaleString()} />
        <StatPill label="L2" value={L(2).toLocaleString()} />
        <StatPill label="L3" value={L(3).toLocaleString()} />
        <StatPill label="L4" value={L(4).toLocaleString()} />
        <StatPill label="L5" value={L(5).toLocaleString()} />
      </div>
    </>
  );
};

const GoldenTab: React.FC<{ yyDecimals?: number; refreshSignal: number; onRefetched?: () => void; }> = ({ yyDecimals = 18, refreshSignal, onRefetched }) => {
  const { address } = useAccount();
  const { loading, logs, total, error, refetch } = useGoldenStarClaimsMine({ user: address });

  useEffect(() => {
    if (refreshSignal > 0) { (async () => { await refetch(); onRefetched?.(); })(); }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [refreshSignal]);

  const totYY = Number(formatUnits(total, yyDecimals));

  return (
    <>
      <div className="hidden md:grid grid-cols-12 px-3 py-2 text-[11px] text-gray-400 bg-white/5 rounded-t-xl">
        <div className="md:col-span-5">User</div>
        <div className="md:col-span-4 text-right">YY</div>
        <div className="md:col-span-3 text-right">Block / Time</div>
      </div>

      <div className="max-h-[60vh] overflow-auto divide-y divide-white/5 rounded-b-xl">
        {loading && (<><div className="p-4"><Progress/></div>{Array.from({length:6}).map((_,i)=><SkeletonRow key={i} cols={3}/>)}</>)}
        {!loading && error && <div className="p-4 text-rose-300 text-sm">{error}</div>}
        {!loading && !error && logs.length===0 && (
          <div className="p-6"><div className="rounded-xl border border-white/10 bg-white/5 p-4 text-center text-sm text-gray-200">
            No golden star claims yet.
            <div className="mt-2 text-[11px] opacity-70">Click Refresh to load.</div>
          </div></div>
        )}

        {!loading && !error && logs.map((l,idx)=>{
          const yy = Number(formatUnits(l.amount, yyDecimals));
          const when = l.ts ? new Date(l.ts*1000) : undefined;
          return (
            <React.Fragment key={`${l.txHash}-${idx}`}>
              <div className="px-3 py-2 hidden md:grid grid-cols-12 gap-1 text-xs text-gray-200">
                <div className="md:col-span-5 font-mono break-all">{l.user}</div>
                <div className="md:col-span-4 text-right">YY {yy.toLocaleString()}</div>
                <div className="md:col-span-3 text-right text-gray-400">#{l.blockNumber.toString()} {when?"• "+when.toLocaleString():""}</div>
              </div>

              <div className="md:hidden p-3">
                <div className="rounded-xl border border-white/10 bg-white/5 p-3 space-y-2">
                  <div className="font-mono text-[11px] text-gray-300 break-all">{l.user}</div>
                  <div className="rounded-lg bg-[#0f1424] px-2 py-1 text-xs text-center text-indigo-200">YY {yy.toLocaleString()}</div>
                  <div className="text-[11px] text-gray-400 text-right">#{l.blockNumber.toString()} {when?"• "+when.toLocaleString():""}</div>
                </div>
              </div>
            </React.Fragment>
          );
        })}
      </div>

      <div className="px-3 sm:px-4 py-3 flex flex-wrap items-center gap-2">
        <StatPill label="Total YY" value={totYY.toLocaleString()} />
      </div>
    </>
  );
};

/* =========================================================
   MAIN: ClaimsHubPanel (mine-only)
   ========================================================= */
const ClaimsHubPanel: React.FC<ClaimsHubPanelProps> = ({
  proxy,
  deployBlock,
  defaultTab = "referral",
  yyDecimals = 18,
}) => {
  const { address } = useAccount();
  const [tab, setTab] = useState<TabKey>(defaultTab);

  // manual refresh signaling
  const [refreshSignal, setRefreshSignal] = useState(0);
  const [lastUpdated, setLastUpdated] = useState<number | null>(null);
  const [refreshing, setRefreshing] = useState(false);
  const inFlight = useRef(false);

  const bumpRefresh = async () => {
    if (inFlight.current) return;
    inFlight.current = true;
    setRefreshing(true);
    try {
      setRefreshSignal((n) => n + 1);
    } finally {
      // cleared in onRefetched
    }
  };

  const handleRefetched = () => {
    setLastUpdated(Date.now());
    setRefreshing(false);
    inFlight.current = false;
  };

  const tabs: Array<{ key: TabKey; label: string; Icon: React.FC<any> }> = [
    { key: "referral", label: "Referral", Icon: Sparkles },
    { key: "star",     label: "Star Levels", Icon: Star },
    { key: "golden",   label: "Golden Star", Icon: Crown },
  ];

  return (
    <div className="relative overflow-hidden rounded-2xl border border-white/10 bg-gradient-to-b from-[#0b1222] to-[#0a0f1c]">
      <div className="pointer-events-none absolute -inset-px rounded-2xl"
           style={{ background: "linear-gradient(135deg, rgba(255,255,255,.06), rgba(255,255,255,.02))" }} />

      {/* Toolbar (sticky) */}
      <div className="sticky top-0 z-10 border-b border-white/10 bg-[#0b1120]/90 backdrop-blur">
        <div className="px-3 sm:px-4 py-3 flex flex-wrap items-center gap-2">
          {/* Tabs */}
          <div className="inline-flex p-1 rounded-xl bg-white/5 border border-white/10">
            {tabs.map(({ key, label, Icon }) => {
              const active = tab === key;
              return (
                <button
                  key={key}
                  onClick={() => setTab(key)}
                  className={[
                    "group px-3 py-1.5 rounded-lg text-xs font-semibold inline-flex items-center gap-2 transition",
                    active ? "bg-white/15 text-white ring-1 ring-white/60" : "text-gray-300 hover:text-white"
                  ].join(" ")}
                >
                  <Icon className="w-4 h-4 opacity-90" />
                  {label}
                </button>
              );
            })}
          </div>

          {/* Mine marker only */}
          <div className="ml-auto inline-flex rounded-xl overflow-hidden border border-white/10">
            <div className="px-3 py-1.5 text-xs font-semibold flex items-center gap-1 bg-white/15 text-white" title="My data only">
              <User className="w-4 h-4" /> Mine
            </div>
          </div>
        </div>

        {/* Meta line + Refresh */}
        <div className="px-3 sm:px-4 pb-3 flex flex-wrap items-center gap-2">
          <StatPill label="Network" value="Base Sepolia" />
          {deployBlock ? <StatPill label="Since block" value={deployBlock.toString()} /> : null}
          <AddressPill address={address} />

          <div className="ml-auto flex items-center gap-3">
            {lastUpdated && (
              <span className="text-[11px] text-gray-400">Updated {new Date(lastUpdated).toLocaleTimeString()}</span>
            )}
            <button
              onClick={bumpRefresh}
              disabled={refreshing || inFlight.current}
              className={`inline-flex items-center gap-2 rounded-lg border px-3 py-1.5 text-xs transition
                ${!(refreshing || inFlight.current)
                  ? "border-white/15 hover:bg-white/5 text-white"
                  : "border-white/10 opacity-60 cursor-not-allowed text-gray-300"}`}
              title="Refresh"
            >
              <RefreshCcw className={`h-4 w-4 ${refreshing ? "animate-spin" : ""}`} />
              {refreshing ? "Refreshing…" : "Refresh"}
            </button>
          </div>
        </div>
      </div>

      {/* Content */}
      <div className="p-3 sm:p-4">
        <div className="rounded-2xl border border-white/10 bg-[#0f1424] overflow-hidden"
             key={`${tab}-${(address ?? "").toLowerCase()}`}
        >
          {tab === "referral" && (
            <ReferralTab
              refreshSignal={refreshSignal}
              onRefetched={handleRefetched}
            />
          )}
          {tab === "star" && (
            <StarTab
              yyDecimals={yyDecimals}
              refreshSignal={refreshSignal}
              onRefetched={handleRefetched}
            />
          )}
          {tab === "golden" && (
            <GoldenTab
              yyDecimals={yyDecimals}
              refreshSignal={refreshSignal}
              onRefetched={handleRefetched}
            />
          )}
        </div>
      </div>
    </div>
  );
};

export default ClaimsHubPanel;
